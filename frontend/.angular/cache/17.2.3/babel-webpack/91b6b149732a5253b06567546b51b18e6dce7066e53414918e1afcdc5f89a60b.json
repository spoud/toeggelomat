{"ast":null,"code":"import { createEffect, ofType, ROOT_EFFECTS_INIT } from '@ngrx/effects';\nimport { EMPTY } from 'rxjs';\nimport { catchError, debounceTime, map, mergeMap } from 'rxjs/operators';\nimport { matchesReload, matchesReloaded, matchStarted, saveMatchScore, startMatch } from './maches.actions';\nimport { playersReload } from '../players/players.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../services/matches-api.service\";\nimport * as i3 from \"../../services/event-api.service\";\nimport * as i4 from \"@ngrx/store\";\nimport * as i5 from \"@angular/router\";\nexport let MatchesEffect = /*#__PURE__*/(() => {\n  class MatchesEffect {\n    constructor(actions$, matchesApiService, eventApiService, store, router) {\n      this.actions$ = actions$;\n      this.matchesApiService = matchesApiService;\n      this.eventApiService = eventApiService;\n      this.store = store;\n      this.router = router;\n      this.initLastMatches$ = createEffect(() => this.actions$.pipe(ofType(ROOT_EFFECTS_INIT), map(() => matchesReload())));\n      this.reloadMatches$ = createEffect(() => this.actions$.pipe(ofType(matchesReload), mergeMap(() => this.matchesApiService.getLastMaches().pipe(map(matches => matchesReloaded({\n        matches\n      })), catchError(() => EMPTY)))));\n      this.scoreStreams = createEffect(() => this.actions$.pipe(ofType(ROOT_EFFECTS_INIT), debounceTime(500), mergeMap(() => this.eventApiService.scoreChangeStream().pipe(map(() => matchesReload())))));\n      // TODO put back when we have slack integration\n      // initMatchStream$ = createEffect(() =>\n      //   this.actions$.pipe(\n      //     ofType(ROOT_EFFECTS_INIT),\n      //     mergeMap(param => {\n      //       return this.eventApiService.matchStream()\n      //         .pipe(\n      //           map(match => {\n      //             console.log('Start match from event', match);\n      //             this.router.navigate([`current-match`]);\n      //             return matchStarted({match});\n      //           }),\n      //           catchError(() => EMPTY)\n      //         );\n      //     })\n      //   )\n      // );\n      this.startMatch$ = createEffect(() => this.actions$.pipe(ofType(startMatch), mergeMap(param => {\n        return this.matchesApiService.startMatch(param.playerUuids).pipe(map(match => {\n          this.router.navigate([`current-match`]);\n          return matchStarted({\n            match\n          });\n        }), catchError(() => EMPTY));\n      })));\n      this.saveScore$ = createEffect(() => this.actions$.pipe(ofType(saveMatchScore), mergeMap(param => {\n        return this.matchesApiService.saveScore(param.match).pipe(mergeMap(match => {\n          this.router.navigate([`scoreboard`]);\n          return [playersReload(), matchesReload()];\n        }), catchError(() => EMPTY));\n      })));\n    }\n    static #_ = this.ɵfac = function MatchesEffect_Factory(t) {\n      return new (t || MatchesEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.MatchesApiService), i0.ɵɵinject(i3.EventApiService), i0.ɵɵinject(i4.Store), i0.ɵɵinject(i5.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: MatchesEffect,\n      factory: MatchesEffect.ɵfac\n    });\n  }\n  return MatchesEffect;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}